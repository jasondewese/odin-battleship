(()=>{"use strict";var e={917:(e,n,t)=>{t.d(n,{Z:()=>s});var r=t(537),o=t.n(r),a=t(645),i=t.n(a)()(o());i.push([e.id,"/* http://meyerweb.com/eric/tools/css/reset/ \n   v2.0 | 20110126\n   License: none (public domain)\n*/\n\nhtml, body, div, span, applet, object, iframe,\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\na, abbr, acronym, address, big, cite, code,\ndel, dfn, em, img, ins, kbd, q, s, samp,\nsmall, strike, strong, sub, sup, tt, var,\nb, u, i, center,\ndl, dt, dd, ol, ul, li,\nfieldset, form, label, legend,\ntable, caption, tbody, tfoot, thead, tr, th, td,\narticle, aside, canvas, details, embed, \nfigure, figcaption, footer, header, hgroup, \nmenu, nav, output, ruby, section, summary,\ntime, mark, audio, video {\n\tmargin: 0;\n\tpadding: 0;\n\tborder: 0;\n\tfont-size: 100%;\n\tfont: inherit;\n\tvertical-align: baseline;\n}\n/* HTML5 display-role reset for older browsers */\narticle, aside, details, figcaption, figure, \nfooter, header, hgroup, menu, nav, section {\n\tdisplay: block;\n}\nbody {\n\tline-height: 1;\n}\nol, ul {\n\tlist-style: none;\n}\nblockquote, q {\n\tquotes: none;\n}\nblockquote:before, blockquote:after,\nq:before, q:after {\n\tcontent: '';\n\tcontent: none;\n}\ntable {\n\tborder-collapse: collapse;\n\tborder-spacing: 0;\n}","",{version:3,sources:["webpack://./src/reset.css"],names:[],mappings:"AAAA;;;CAGC;;AAED;;;;;;;;;;;;;CAaC,SAAS;CACT,UAAU;CACV,SAAS;CACT,eAAe;CACf,aAAa;CACb,wBAAwB;AACzB;AACA,gDAAgD;AAChD;;CAEC,cAAc;AACf;AACA;CACC,cAAc;AACf;AACA;CACC,gBAAgB;AACjB;AACA;CACC,YAAY;AACb;AACA;;CAEC,WAAW;CACX,aAAa;AACd;AACA;CACC,yBAAyB;CACzB,iBAAiB;AAClB",sourcesContent:["/* http://meyerweb.com/eric/tools/css/reset/ \n   v2.0 | 20110126\n   License: none (public domain)\n*/\n\nhtml, body, div, span, applet, object, iframe,\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\na, abbr, acronym, address, big, cite, code,\ndel, dfn, em, img, ins, kbd, q, s, samp,\nsmall, strike, strong, sub, sup, tt, var,\nb, u, i, center,\ndl, dt, dd, ol, ul, li,\nfieldset, form, label, legend,\ntable, caption, tbody, tfoot, thead, tr, th, td,\narticle, aside, canvas, details, embed, \nfigure, figcaption, footer, header, hgroup, \nmenu, nav, output, ruby, section, summary,\ntime, mark, audio, video {\n\tmargin: 0;\n\tpadding: 0;\n\tborder: 0;\n\tfont-size: 100%;\n\tfont: inherit;\n\tvertical-align: baseline;\n}\n/* HTML5 display-role reset for older browsers */\narticle, aside, details, figcaption, figure, \nfooter, header, hgroup, menu, nav, section {\n\tdisplay: block;\n}\nbody {\n\tline-height: 1;\n}\nol, ul {\n\tlist-style: none;\n}\nblockquote, q {\n\tquotes: none;\n}\nblockquote:before, blockquote:after,\nq:before, q:after {\n\tcontent: '';\n\tcontent: none;\n}\ntable {\n\tborder-collapse: collapse;\n\tborder-spacing: 0;\n}"],sourceRoot:""}]);const s=i},426:(e,n,t)=>{t.d(n,{Z:()=>s});var r=t(537),o=t.n(r),a=t(645),i=t.n(a)()(o());i.push([e.id,"html {\n    box-sizing: border-box;\n    font-family: sans-serif;\n    font-size: 16px;\n    background-color: #fafafa;\n    color: #262626;\n}\n\nbody {\n    height: 100vh;\n    width: 100vw;\n\n    display: grid;\n    grid-template-rows: 6rem 1fr 3rem;\n    background-color: #1e3a8a;\n    color: #e5e5e5;\n}\n\n/*Header style*/\nheader {\n    \n    display: flex;\n    justify-content: center;\n    align-items: center;\n}\n\nh1 {\n    font-size: 3rem;\n}\n/*End Header style*/\n\n/*Main game area style*/\nmain {\n    \n    display: grid;\n    grid-template-rows: 5rem 3rem 1fr;\n    align-items: center;\n    justify-items: center;\n}\n\n.board-section {\n    display: flex;\n    /*To allow easy insertion of second gameboard to screen*/\n    justify-content: space-around;\n    gap: 100px;\n}\n\n#axis-button {\n    height: 2rem;\n    width: 8rem;\n}\n\n\n\n.board-wrapper {\n    \n    width: 500px;\n    height: 500px;\n\n    display: grid;\n    gap: 2px;\n    grid-template-rows: repeat(10, 1fr);\n    grid-template-columns: repeat(10, 1fr);\n}\n\n.board-cell {\n    height: 100%;\n    width: 100%;\n    border: 2px solid #fafafa;\n}\n\n.board-cell:hover {\n    cursor: pointer;\n    background-color: #2e4a9a;\n}\n\n.ship-cell:hover {\n    cursor: pointer;\n    background-color: #bfdbfe !important;\n}\n/*End Main game area style*/\n\n/*Footer style*/\nfooter {\n    background-color: #e5e5e5;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n}\n\n.project-links {\n    color: #262626;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    gap: 20px;\n}\n\n.git-logo {\n    width: 32px;\n}\n/*End Footer style*/","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;IACI,sBAAsB;IACtB,uBAAuB;IACvB,eAAe;IACf,yBAAyB;IACzB,cAAc;AAClB;;AAEA;IACI,aAAa;IACb,YAAY;;IAEZ,aAAa;IACb,iCAAiC;IACjC,yBAAyB;IACzB,cAAc;AAClB;;AAEA,eAAe;AACf;;IAEI,aAAa;IACb,uBAAuB;IACvB,mBAAmB;AACvB;;AAEA;IACI,eAAe;AACnB;AACA,mBAAmB;;AAEnB,uBAAuB;AACvB;;IAEI,aAAa;IACb,iCAAiC;IACjC,mBAAmB;IACnB,qBAAqB;AACzB;;AAEA;IACI,aAAa;IACb,wDAAwD;IACxD,6BAA6B;IAC7B,UAAU;AACd;;AAEA;IACI,YAAY;IACZ,WAAW;AACf;;;;AAIA;;IAEI,YAAY;IACZ,aAAa;;IAEb,aAAa;IACb,QAAQ;IACR,mCAAmC;IACnC,sCAAsC;AAC1C;;AAEA;IACI,YAAY;IACZ,WAAW;IACX,yBAAyB;AAC7B;;AAEA;IACI,eAAe;IACf,yBAAyB;AAC7B;;AAEA;IACI,eAAe;IACf,oCAAoC;AACxC;AACA,2BAA2B;;AAE3B,eAAe;AACf;IACI,yBAAyB;IACzB,aAAa;IACb,mBAAmB;IACnB,uBAAuB;AAC3B;;AAEA;IACI,cAAc;IACd,aAAa;IACb,uBAAuB;IACvB,mBAAmB;IACnB,SAAS;AACb;;AAEA;IACI,WAAW;AACf;AACA,mBAAmB",sourcesContent:["html {\n    box-sizing: border-box;\n    font-family: sans-serif;\n    font-size: 16px;\n    background-color: #fafafa;\n    color: #262626;\n}\n\nbody {\n    height: 100vh;\n    width: 100vw;\n\n    display: grid;\n    grid-template-rows: 6rem 1fr 3rem;\n    background-color: #1e3a8a;\n    color: #e5e5e5;\n}\n\n/*Header style*/\nheader {\n    \n    display: flex;\n    justify-content: center;\n    align-items: center;\n}\n\nh1 {\n    font-size: 3rem;\n}\n/*End Header style*/\n\n/*Main game area style*/\nmain {\n    \n    display: grid;\n    grid-template-rows: 5rem 3rem 1fr;\n    align-items: center;\n    justify-items: center;\n}\n\n.board-section {\n    display: flex;\n    /*To allow easy insertion of second gameboard to screen*/\n    justify-content: space-around;\n    gap: 100px;\n}\n\n#axis-button {\n    height: 2rem;\n    width: 8rem;\n}\n\n\n\n.board-wrapper {\n    \n    width: 500px;\n    height: 500px;\n\n    display: grid;\n    gap: 2px;\n    grid-template-rows: repeat(10, 1fr);\n    grid-template-columns: repeat(10, 1fr);\n}\n\n.board-cell {\n    height: 100%;\n    width: 100%;\n    border: 2px solid #fafafa;\n}\n\n.board-cell:hover {\n    cursor: pointer;\n    background-color: #2e4a9a;\n}\n\n.ship-cell:hover {\n    cursor: pointer;\n    background-color: #bfdbfe !important;\n}\n/*End Main game area style*/\n\n/*Footer style*/\nfooter {\n    background-color: #e5e5e5;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n}\n\n.project-links {\n    color: #262626;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    gap: 20px;\n}\n\n.git-logo {\n    width: 32px;\n}\n/*End Footer style*/"],sourceRoot:""}]);const s=i},645:e=>{e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var t="",r=void 0!==n[5];return n[4]&&(t+="@supports (".concat(n[4],") {")),n[2]&&(t+="@media ".concat(n[2]," {")),r&&(t+="@layer".concat(n[5].length>0?" ".concat(n[5]):""," {")),t+=e(n),r&&(t+="}"),n[2]&&(t+="}"),n[4]&&(t+="}"),t})).join("")},n.i=function(e,t,r,o,a){"string"==typeof e&&(e=[[null,e,void 0]]);var i={};if(r)for(var s=0;s<this.length;s++){var c=this[s][0];null!=c&&(i[c]=!0)}for(var l=0;l<e.length;l++){var A=[].concat(e[l]);r&&i[A[0]]||(void 0!==a&&(void 0===A[5]||(A[1]="@layer".concat(A[5].length>0?" ".concat(A[5]):""," {").concat(A[1],"}")),A[5]=a),t&&(A[2]?(A[1]="@media ".concat(A[2]," {").concat(A[1],"}"),A[2]=t):A[2]=t),o&&(A[4]?(A[1]="@supports (".concat(A[4],") {").concat(A[1],"}"),A[4]=o):A[4]="".concat(o)),n.push(A))}},n}},537:e=>{e.exports=function(e){var n=e[1],t=e[3];if(!t)return n;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),a="/*# ".concat(o," */"),i=t.sources.map((function(e){return"/*# sourceURL=".concat(t.sourceRoot||"").concat(e," */")}));return[n].concat(i).concat([a]).join("\n")}return[n].join("\n")}},379:e=>{var n=[];function t(e){for(var t=-1,r=0;r<n.length;r++)if(n[r].identifier===e){t=r;break}return t}function r(e,r){for(var a={},i=[],s=0;s<e.length;s++){var c=e[s],l=r.base?c[0]+r.base:c[0],A=a[l]||0,d="".concat(l," ").concat(A);a[l]=A+1;var p=t(d),u={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==p)n[p].references++,n[p].updater(u);else{var f=o(u,r);r.byIndex=s,n.splice(s,0,{identifier:d,updater:f,references:1})}i.push(d)}return i}function o(e,n){var t=n.domAPI(n);return t.update(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap&&n.supports===e.supports&&n.layer===e.layer)return;t.update(e=n)}else t.remove()}}e.exports=function(e,o){var a=r(e=e||[],o=o||{});return function(e){e=e||[];for(var i=0;i<a.length;i++){var s=t(a[i]);n[s].references--}for(var c=r(e,o),l=0;l<a.length;l++){var A=t(a[l]);0===n[A].references&&(n[A].updater(),n.splice(A,1))}a=c}}},569:e=>{var n={};e.exports=function(e,t){var r=function(e){if(void 0===n[e]){var t=document.querySelector(e);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(e){t=null}n[e]=t}return n[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},216:e=>{e.exports=function(e){var n=document.createElement("style");return e.setAttributes(n,e.attributes),e.insert(n,e.options),n}},565:(e,n,t)=>{e.exports=function(e){var n=t.nc;n&&e.setAttribute("nonce",n)}},795:e=>{e.exports=function(e){var n=e.insertStyleElement(e);return{update:function(t){!function(e,n,t){var r="";t.supports&&(r+="@supports (".concat(t.supports,") {")),t.media&&(r+="@media ".concat(t.media," {"));var o=void 0!==t.layer;o&&(r+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),r+=t.css,o&&(r+="}"),t.media&&(r+="}"),t.supports&&(r+="}");var a=t.sourceMap;a&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),n.styleTagTransform(r,e,n.options)}(n,e,t)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)}}}},589:e=>{e.exports=function(e,n){if(n.styleSheet)n.styleSheet.cssText=e;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(e))}}}},n={};function t(r){var o=n[r];if(void 0!==o)return o.exports;var a=n[r]={id:r,exports:{}};return e[r](a,a.exports,t),a.exports}t.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return t.d(n,{a:n}),n},t.d=(e,n)=>{for(var r in n)t.o(n,r)&&!t.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:n[r]})},t.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),(()=>{var e=t(379),n=t.n(e),r=t(795),o=t.n(r),a=t(569),i=t.n(a),s=t(565),c=t.n(s),l=t(216),A=t.n(l),d=t(589),p=t.n(d),u=t(917),f={};f.styleTagTransform=p(),f.setAttributes=c(),f.insert=i().bind(null,"head"),f.domAPI=o(),f.insertStyleElement=A(),n()(u.Z,f),u.Z&&u.Z.locals&&u.Z.locals;var m=t(426),h={};h.styleTagTransform=p(),h.setAttributes=c(),h.insert=i().bind(null,"head"),h.domAPI=o(),h.insertStyleElement=A(),n()(m.Z,h),m.Z&&m.Z.locals&&m.Z.locals;const b=(e,n,t,r)=>{((e,n,t)=>{const r=document.querySelector(".player-board");for(let o=0;o<10;o++)for(let a=0;a<10;a++){const i=document.createElement("div");i.classList.add("board-cell"),"object"==typeof n.getBoard()[o][a]&&(i.style.backgroundColor="#60a5fa",i.classList.add("ship-cell")),i.addEventListener("click",(function(){v.gameTurn(e,t,n,o,a)})),r.appendChild(i)}})(n,t,r),((e,n,t)=>{const r=document.querySelector(".computer-board");for(let o=0;o<10;o++)for(let a=0;a<10;a++){const i=document.createElement("div");i.classList.add("board-cell"),"object"==typeof t.getBoard()[o][a]&&(i.style.backgroundColor="#60a5fa",i.classList.add("ship-cell")),i.addEventListener("click",(function(){v.gameTurn(e,n,t,o,a)})),r.appendChild(i)}})(e,t,r)},C=e=>{const n=e;let t=!1,r=[];return(()=>{for(let e=0;e<n;e++)r.push(!1)})(),{isSunk:()=>{t=!0;for(const e of r)0==e&&(t=!1);return t},hit:e=>(r[e]=!0,r)}},g=()=>{const e=10;let n=[],t=[],r=[];return(()=>{for(let t=0;t<e;t++){n.push([]),r.push([]);for(let o=0;o<e;o++)n[t].push(-1),r[t].push(-1)}})(),(()=>{for(let e=1;e<=5;e++)1===e?t.push(C(e+1)):t.push(C(e))})(),{placeShip:(r,o,a,i,s)=>{if(r>=t.length||r<0)throw new Error("No ship exists at provided index");if(o>=e||a>=e||i>=e||s>=e)throw new Error("Invalid coordinates received. Out of bounds");if(o<0||a<0||i<0||s<0)throw new Error("Invalid coordinates received. Out of bounds");let c=0;for(let e=o;e<=i;e++)for(let t=a;t<=s;t++)n[e][t]={ship:r,shipIndex:c},c++;return[n[o][a].ship,n[i][s].ship]},receiveAttack:(e,o)=>"object"==typeof n[e][o]?(t[n[e][o].ship].hit(n[e][o].shipIndex),r[e][o]=1,"HIT"):(r[e][o]=0,"MISS"),isAllSunk:()=>{let e=!0;for(const n of t)n.isSunk()||(e=!1);return e},getShotStatus:(n,t)=>{if(n>=e||t>=e)throw new Error("Invalid coordinates received. Out of bounds");if(n<0||t<0)throw new Error("Invalid coordinates received. Out of bounds");let o=r[n][t];if(-1===o)return"No shot fired";if(1===o)return"HIT";if(0===o)return"MISS";throw new Error("Invalid coordinate received")},printBoard:()=>{let t="";for(let r=0;r<e;r++){for(let o=0;o<e;o++)t+=n[r][o]+", ";t+="\n"}return t},getBoard:()=>n}},y=e=>{const n=e;return{attack:(e,n,t)=>{if(!e.hasOwnProperty("placeShip"))throw new Error("Invalid gameboard object received");return((e,n,t)=>{if(!e.hasOwnProperty("placeShip"))throw new Error("Invalid gameboard object received");return"HIT"!==e.getShotStatus(n,t)&&"MISS"!==e.getShotStatus(n,t)})(e,n,t)?(e.receiveAttack(n,t),e.getShotStatus(n,t)):"Attack failed. Cannot attack same square twice"},isPlayerHuman:()=>n}},v=(()=>{const e=y(!0),n=y(!1),t=g(),r=g();return{initGame:()=>{t.placeShip(0,0,0,1,0),t.placeShip(1,0,1,1,1),t.placeShip(2,0,2,2,2),t.placeShip(3,0,3,3,3),t.placeShip(4,0,4,4,4),r.placeShip(0,0,0,1,0),r.placeShip(1,0,2,1,2),r.placeShip(2,8,5,8,8),r.placeShip(3,1,7,5,7),r.placeShip(4,6,1,6,5),b(e,n,t,r)},gameLoop:()=>{for(;!t.isAllSunk()&&!r.isAllSunk();)console.log("Game over."),t.isAllSunk()?console.log("Computer player wins!"):console.log("You win!")},gameTurn:(e,n,t,r,o)=>{console.log(e.attack(t,r,o)),console.log(`Attack received at ${r},${o}`);let a=e.isPlayerHuman()?"You win!":"Computer player wins!";t.isAllSunk()&&console.log(a)}}})();v.initGame()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,