(()=>{"use strict";var n={917:(n,e,t)=>{t.d(e,{Z:()=>s});var r=t(537),o=t.n(r),a=t(645),i=t.n(a)()(o());i.push([n.id,"/* http://meyerweb.com/eric/tools/css/reset/ \n   v2.0 | 20110126\n   License: none (public domain)\n*/\n\nhtml, body, div, span, applet, object, iframe,\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\na, abbr, acronym, address, big, cite, code,\ndel, dfn, em, img, ins, kbd, q, s, samp,\nsmall, strike, strong, sub, sup, tt, var,\nb, u, i, center,\ndl, dt, dd, ol, ul, li,\nfieldset, form, label, legend,\ntable, caption, tbody, tfoot, thead, tr, th, td,\narticle, aside, canvas, details, embed, \nfigure, figcaption, footer, header, hgroup, \nmenu, nav, output, ruby, section, summary,\ntime, mark, audio, video {\n\tmargin: 0;\n\tpadding: 0;\n\tborder: 0;\n\tfont-size: 100%;\n\tfont: inherit;\n\tvertical-align: baseline;\n}\n/* HTML5 display-role reset for older browsers */\narticle, aside, details, figcaption, figure, \nfooter, header, hgroup, menu, nav, section {\n\tdisplay: block;\n}\nbody {\n\tline-height: 1;\n}\nol, ul {\n\tlist-style: none;\n}\nblockquote, q {\n\tquotes: none;\n}\nblockquote:before, blockquote:after,\nq:before, q:after {\n\tcontent: '';\n\tcontent: none;\n}\ntable {\n\tborder-collapse: collapse;\n\tborder-spacing: 0;\n}","",{version:3,sources:["webpack://./src/reset.css"],names:[],mappings:"AAAA;;;CAGC;;AAED;;;;;;;;;;;;;CAaC,SAAS;CACT,UAAU;CACV,SAAS;CACT,eAAe;CACf,aAAa;CACb,wBAAwB;AACzB;AACA,gDAAgD;AAChD;;CAEC,cAAc;AACf;AACA;CACC,cAAc;AACf;AACA;CACC,gBAAgB;AACjB;AACA;CACC,YAAY;AACb;AACA;;CAEC,WAAW;CACX,aAAa;AACd;AACA;CACC,yBAAyB;CACzB,iBAAiB;AAClB",sourcesContent:["/* http://meyerweb.com/eric/tools/css/reset/ \n   v2.0 | 20110126\n   License: none (public domain)\n*/\n\nhtml, body, div, span, applet, object, iframe,\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\na, abbr, acronym, address, big, cite, code,\ndel, dfn, em, img, ins, kbd, q, s, samp,\nsmall, strike, strong, sub, sup, tt, var,\nb, u, i, center,\ndl, dt, dd, ol, ul, li,\nfieldset, form, label, legend,\ntable, caption, tbody, tfoot, thead, tr, th, td,\narticle, aside, canvas, details, embed, \nfigure, figcaption, footer, header, hgroup, \nmenu, nav, output, ruby, section, summary,\ntime, mark, audio, video {\n\tmargin: 0;\n\tpadding: 0;\n\tborder: 0;\n\tfont-size: 100%;\n\tfont: inherit;\n\tvertical-align: baseline;\n}\n/* HTML5 display-role reset for older browsers */\narticle, aside, details, figcaption, figure, \nfooter, header, hgroup, menu, nav, section {\n\tdisplay: block;\n}\nbody {\n\tline-height: 1;\n}\nol, ul {\n\tlist-style: none;\n}\nblockquote, q {\n\tquotes: none;\n}\nblockquote:before, blockquote:after,\nq:before, q:after {\n\tcontent: '';\n\tcontent: none;\n}\ntable {\n\tborder-collapse: collapse;\n\tborder-spacing: 0;\n}"],sourceRoot:""}]);const s=i},426:(n,e,t)=>{t.d(e,{Z:()=>s});var r=t(537),o=t.n(r),a=t(645),i=t.n(a)()(o());i.push([n.id,"html {\n    box-sizing: border-box;\n    font-family: sans-serif;\n    font-size: 16px;\n    background-color: #fafafa;\n    color: #262626;\n}\n\nbody {\n    height: 100vh;\n    width: 100vw;\n\n    display: grid;\n    grid-template-rows: 6rem 1fr 3rem;\n    background-color: #1e3a8a;\n    color: #e5e5e5;\n}\n\n/*Header style*/\nheader {\n    \n    display: flex;\n    justify-content: center;\n    align-items: center;\n}\n\nh1 {\n    font-size: 3rem;\n}\n/*End Header style*/\n\n/*Main game area style*/\nmain {\n    \n    display: grid;\n    grid-template-rows: 5rem 3rem 1fr;\n    align-items: center;\n    justify-items: center;\n}\n\n.board-section {\n    display: flex;\n    /*To allow easy insertion of second gameboard to screen*/\n    justify-content: space-around;\n    gap: 100px;\n}\n\n#axis-button {\n    height: 2rem;\n    width: 8rem;\n}\n\n\n\n.board-wrapper {\n    \n    width: 500px;\n    height: 500px;\n\n    display: grid;\n    gap: 2px;\n    grid-template-rows: repeat(10, 1fr);\n    grid-template-columns: repeat(10, 1fr);\n}\n\n.board-cell {\n    height: 100%;\n    width: 100%;\n    border: 2px solid #fafafa;\n}\n\n.ship-cell {\n    background-color: #60a5fa;\n}\n\n.board-cell:hover {\n    cursor: pointer;\n    background-color: #2e4a9a;\n}\n\n.ship-cell:hover {\n    cursor: pointer;\n    background-color: #bfdbfe;\n}\n\n.hit-cell {\n    background-color: #86efac;\n}\n\n.miss-cell {\n    background-color: #fca5a5;\n}\n/*End Main game area style*/\n\n/*Footer style*/\nfooter {\n    background-color: #e5e5e5;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n}\n\n.project-links {\n    color: #262626;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    gap: 20px;\n}\n\n.git-logo {\n    width: 32px;\n}\n/*End Footer style*/","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;IACI,sBAAsB;IACtB,uBAAuB;IACvB,eAAe;IACf,yBAAyB;IACzB,cAAc;AAClB;;AAEA;IACI,aAAa;IACb,YAAY;;IAEZ,aAAa;IACb,iCAAiC;IACjC,yBAAyB;IACzB,cAAc;AAClB;;AAEA,eAAe;AACf;;IAEI,aAAa;IACb,uBAAuB;IACvB,mBAAmB;AACvB;;AAEA;IACI,eAAe;AACnB;AACA,mBAAmB;;AAEnB,uBAAuB;AACvB;;IAEI,aAAa;IACb,iCAAiC;IACjC,mBAAmB;IACnB,qBAAqB;AACzB;;AAEA;IACI,aAAa;IACb,wDAAwD;IACxD,6BAA6B;IAC7B,UAAU;AACd;;AAEA;IACI,YAAY;IACZ,WAAW;AACf;;;;AAIA;;IAEI,YAAY;IACZ,aAAa;;IAEb,aAAa;IACb,QAAQ;IACR,mCAAmC;IACnC,sCAAsC;AAC1C;;AAEA;IACI,YAAY;IACZ,WAAW;IACX,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,eAAe;IACf,yBAAyB;AAC7B;;AAEA;IACI,eAAe;IACf,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B;AACA,2BAA2B;;AAE3B,eAAe;AACf;IACI,yBAAyB;IACzB,aAAa;IACb,mBAAmB;IACnB,uBAAuB;AAC3B;;AAEA;IACI,cAAc;IACd,aAAa;IACb,uBAAuB;IACvB,mBAAmB;IACnB,SAAS;AACb;;AAEA;IACI,WAAW;AACf;AACA,mBAAmB",sourcesContent:["html {\n    box-sizing: border-box;\n    font-family: sans-serif;\n    font-size: 16px;\n    background-color: #fafafa;\n    color: #262626;\n}\n\nbody {\n    height: 100vh;\n    width: 100vw;\n\n    display: grid;\n    grid-template-rows: 6rem 1fr 3rem;\n    background-color: #1e3a8a;\n    color: #e5e5e5;\n}\n\n/*Header style*/\nheader {\n    \n    display: flex;\n    justify-content: center;\n    align-items: center;\n}\n\nh1 {\n    font-size: 3rem;\n}\n/*End Header style*/\n\n/*Main game area style*/\nmain {\n    \n    display: grid;\n    grid-template-rows: 5rem 3rem 1fr;\n    align-items: center;\n    justify-items: center;\n}\n\n.board-section {\n    display: flex;\n    /*To allow easy insertion of second gameboard to screen*/\n    justify-content: space-around;\n    gap: 100px;\n}\n\n#axis-button {\n    height: 2rem;\n    width: 8rem;\n}\n\n\n\n.board-wrapper {\n    \n    width: 500px;\n    height: 500px;\n\n    display: grid;\n    gap: 2px;\n    grid-template-rows: repeat(10, 1fr);\n    grid-template-columns: repeat(10, 1fr);\n}\n\n.board-cell {\n    height: 100%;\n    width: 100%;\n    border: 2px solid #fafafa;\n}\n\n.ship-cell {\n    background-color: #60a5fa;\n}\n\n.board-cell:hover {\n    cursor: pointer;\n    background-color: #2e4a9a;\n}\n\n.ship-cell:hover {\n    cursor: pointer;\n    background-color: #bfdbfe;\n}\n\n.hit-cell {\n    background-color: #86efac;\n}\n\n.miss-cell {\n    background-color: #fca5a5;\n}\n/*End Main game area style*/\n\n/*Footer style*/\nfooter {\n    background-color: #e5e5e5;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n}\n\n.project-links {\n    color: #262626;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    gap: 20px;\n}\n\n.git-logo {\n    width: 32px;\n}\n/*End Footer style*/"],sourceRoot:""}]);const s=i},645:n=>{n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t="",r=void 0!==e[5];return e[4]&&(t+="@supports (".concat(e[4],") {")),e[2]&&(t+="@media ".concat(e[2]," {")),r&&(t+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),t+=n(e),r&&(t+="}"),e[2]&&(t+="}"),e[4]&&(t+="}"),t})).join("")},e.i=function(n,t,r,o,a){"string"==typeof n&&(n=[[null,n,void 0]]);var i={};if(r)for(var s=0;s<this.length;s++){var c=this[s][0];null!=c&&(i[c]=!0)}for(var l=0;l<n.length;l++){var A=[].concat(n[l]);r&&i[A[0]]||(void 0!==a&&(void 0===A[5]||(A[1]="@layer".concat(A[5].length>0?" ".concat(A[5]):""," {").concat(A[1],"}")),A[5]=a),t&&(A[2]?(A[1]="@media ".concat(A[2]," {").concat(A[1],"}"),A[2]=t):A[2]=t),o&&(A[4]?(A[1]="@supports (".concat(A[4],") {").concat(A[1],"}"),A[4]=o):A[4]="".concat(o)),e.push(A))}},e}},537:n=>{n.exports=function(n){var e=n[1],t=n[3];if(!t)return e;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),a="/*# ".concat(o," */"),i=t.sources.map((function(n){return"/*# sourceURL=".concat(t.sourceRoot||"").concat(n," */")}));return[e].concat(i).concat([a]).join("\n")}return[e].join("\n")}},379:n=>{var e=[];function t(n){for(var t=-1,r=0;r<e.length;r++)if(e[r].identifier===n){t=r;break}return t}function r(n,r){for(var a={},i=[],s=0;s<n.length;s++){var c=n[s],l=r.base?c[0]+r.base:c[0],A=a[l]||0,d="".concat(l," ").concat(A);a[l]=A+1;var p=t(d),u={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==p)e[p].references++,e[p].updater(u);else{var f=o(u,r);r.byIndex=s,e.splice(s,0,{identifier:d,updater:f,references:1})}i.push(d)}return i}function o(n,e){var t=e.domAPI(e);return t.update(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap&&e.supports===n.supports&&e.layer===n.layer)return;t.update(n=e)}else t.remove()}}n.exports=function(n,o){var a=r(n=n||[],o=o||{});return function(n){n=n||[];for(var i=0;i<a.length;i++){var s=t(a[i]);e[s].references--}for(var c=r(n,o),l=0;l<a.length;l++){var A=t(a[l]);0===e[A].references&&(e[A].updater(),e.splice(A,1))}a=c}}},569:n=>{var e={};n.exports=function(n,t){var r=function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}e[n]=t}return e[n]}(n);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},216:n=>{n.exports=function(n){var e=document.createElement("style");return n.setAttributes(e,n.attributes),n.insert(e,n.options),e}},565:(n,e,t)=>{n.exports=function(n){var e=t.nc;e&&n.setAttribute("nonce",e)}},795:n=>{n.exports=function(n){var e=n.insertStyleElement(n);return{update:function(t){!function(n,e,t){var r="";t.supports&&(r+="@supports (".concat(t.supports,") {")),t.media&&(r+="@media ".concat(t.media," {"));var o=void 0!==t.layer;o&&(r+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),r+=t.css,o&&(r+="}"),t.media&&(r+="}"),t.supports&&(r+="}");var a=t.sourceMap;a&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),e.styleTagTransform(r,n,e.options)}(e,n,t)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)}}}},589:n=>{n.exports=function(n,e){if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}}},e={};function t(r){var o=e[r];if(void 0!==o)return o.exports;var a=e[r]={id:r,exports:{}};return n[r](a,a.exports,t),a.exports}t.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return t.d(e,{a:e}),e},t.d=(n,e)=>{for(var r in e)t.o(e,r)&&!t.o(n,r)&&Object.defineProperty(n,r,{enumerable:!0,get:e[r]})},t.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),(()=>{var n=t(379),e=t.n(n),r=t(795),o=t.n(r),a=t(569),i=t.n(a),s=t(565),c=t.n(s),l=t(216),A=t.n(l),d=t(589),p=t.n(d),u=t(917),f={};f.styleTagTransform=p(),f.setAttributes=c(),f.insert=i().bind(null,"head"),f.domAPI=o(),f.insertStyleElement=A(),e()(u.Z,f),u.Z&&u.Z.locals&&u.Z.locals;var m=t(426),h={};h.styleTagTransform=p(),h.setAttributes=c(),h.insert=i().bind(null,"head"),h.domAPI=o(),h.insertStyleElement=A(),e()(m.Z,h),m.Z&&m.Z.locals&&m.Z.locals;const b=(n,e,t,r)=>{((n,e,t)=>{const r=document.querySelector(".player-board");for(let o=0;o<10;o++)for(let a=0;a<10;a++){const i=document.createElement("div");i.classList.add("board-cell"),i.id="player"+o+a,"object"==typeof e.getBoard()[o][a]&&i.classList.add("ship-cell"),i.addEventListener("click",(function(){v.gameTurn(n,t,e,o,a)})),r.appendChild(i)}})(e,t,r),((n,e,t)=>{const r=document.querySelector(".computer-board");for(let o=0;o<10;o++)for(let a=0;a<10;a++){const i=document.createElement("div");i.classList.add("board-cell"),i.id="comp"+o+a,"object"==typeof t.getBoard()[o][a]&&i.classList.add("ship-cell"),i.addEventListener("click",(function(){v.gameTurn(n,e,t,o,a)})),r.appendChild(i)}})(n,t,r)},C=n=>{const e=n;let t=!1,r=[];return(()=>{for(let n=0;n<e;n++)r.push(!1)})(),{isSunk:()=>{t=!0;for(const n of r)0==n&&(t=!1);return t},hit:n=>(r[n]=!0,r)}},g=()=>{const n=10;let e=[],t=[],r=[];return(()=>{for(let t=0;t<n;t++){e.push([]),r.push([]);for(let o=0;o<n;o++)e[t].push(-1),r[t].push(-1)}})(),(()=>{for(let n=1;n<=5;n++)1===n?t.push(C(n+1)):t.push(C(n))})(),{placeShip:(r,o,a,i,s)=>{if(r>=t.length||r<0)throw new Error("No ship exists at provided index");if(o>=n||a>=n||i>=n||s>=n)throw new Error("Invalid coordinates received. Out of bounds");if(o<0||a<0||i<0||s<0)throw new Error("Invalid coordinates received. Out of bounds");let c=0;for(let n=o;n<=i;n++)for(let t=a;t<=s;t++)e[n][t]={ship:r,shipIndex:c},c++;return[e[o][a].ship,e[i][s].ship]},receiveAttack:(n,o)=>"object"==typeof e[n][o]?(t[e[n][o].ship].hit(e[n][o].shipIndex),r[n][o]=1,"HIT"):(r[n][o]=0,"MISS"),isAllSunk:()=>{let n=!0;for(const e of t)e.isSunk()||(n=!1);return n},getShotStatus:(e,t)=>{if(e>=n||t>=n)throw new Error("Invalid coordinates received. Out of bounds");if(e<0||t<0)throw new Error("Invalid coordinates received. Out of bounds");let o=r[e][t];if(-1===o)return"No shot fired";if(1===o)return"HIT";if(0===o)return"MISS";throw new Error("Invalid coordinate received")},printBoard:()=>{let t="";for(let r=0;r<n;r++){for(let o=0;o<n;o++)t+=e[r][o]+", ";t+="\n"}return t},getBoard:()=>e}},y=n=>{const e=n;return{attack:(n,e,t)=>{if(!n.hasOwnProperty("placeShip"))throw new Error("Invalid gameboard object received");return((n,e,t)=>{if(!n.hasOwnProperty("placeShip"))throw new Error("Invalid gameboard object received");return"HIT"!==n.getShotStatus(e,t)&&"MISS"!==n.getShotStatus(e,t)})(n,e,t)?(n.receiveAttack(e,t),n.getShotStatus(e,t)):"Attack failed. Cannot attack same square twice"},isPlayerHuman:()=>e}},v=(()=>{const n=y(!0),e=y(!1),t=g(),r=g();return{initGame:()=>{t.placeShip(0,0,0,1,0),t.placeShip(1,0,1,1,1),t.placeShip(2,0,2,2,2),t.placeShip(3,0,3,3,3),t.placeShip(4,0,4,4,4),r.placeShip(0,0,0,1,0),r.placeShip(1,0,2,1,2),r.placeShip(2,8,5,8,8),r.placeShip(3,1,7,5,7),r.placeShip(4,6,1,6,5),b(n,e,t,r)},gameLoop:()=>{for(;!t.isAllSunk()&&!r.isAllSunk();)console.log("Game over."),t.isAllSunk()?console.log("Computer player wins!"):console.log("You win!")},gameTurn:(n,e,t,r,o)=>{let a=n.attack(t,r,o);console.log(a),console.log(`Attack received at ${r},${o}`),"HIT"===a&&document.getElementById("comp"+r+o).classList.add("hit-cell");let i=n.isPlayerHuman()?"You win!":"Computer player wins!";t.isAllSunk()&&console.log(i)}}})();v.initGame()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,