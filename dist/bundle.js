(()=>{"use strict";var e={917:(e,n,t)=>{t.d(n,{Z:()=>s});var r=t(537),o=t.n(r),a=t(645),i=t.n(a)()(o());i.push([e.id,"/* http://meyerweb.com/eric/tools/css/reset/ \n   v2.0 | 20110126\n   License: none (public domain)\n*/\n\nhtml, body, div, span, applet, object, iframe,\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\na, abbr, acronym, address, big, cite, code,\ndel, dfn, em, img, ins, kbd, q, s, samp,\nsmall, strike, strong, sub, sup, tt, var,\nb, u, i, center,\ndl, dt, dd, ol, ul, li,\nfieldset, form, label, legend,\ntable, caption, tbody, tfoot, thead, tr, th, td,\narticle, aside, canvas, details, embed, \nfigure, figcaption, footer, header, hgroup, \nmenu, nav, output, ruby, section, summary,\ntime, mark, audio, video {\n\tmargin: 0;\n\tpadding: 0;\n\tborder: 0;\n\tfont-size: 100%;\n\tfont: inherit;\n\tvertical-align: baseline;\n}\n/* HTML5 display-role reset for older browsers */\narticle, aside, details, figcaption, figure, \nfooter, header, hgroup, menu, nav, section {\n\tdisplay: block;\n}\nbody {\n\tline-height: 1;\n}\nol, ul {\n\tlist-style: none;\n}\nblockquote, q {\n\tquotes: none;\n}\nblockquote:before, blockquote:after,\nq:before, q:after {\n\tcontent: '';\n\tcontent: none;\n}\ntable {\n\tborder-collapse: collapse;\n\tborder-spacing: 0;\n}","",{version:3,sources:["webpack://./src/reset.css"],names:[],mappings:"AAAA;;;CAGC;;AAED;;;;;;;;;;;;;CAaC,SAAS;CACT,UAAU;CACV,SAAS;CACT,eAAe;CACf,aAAa;CACb,wBAAwB;AACzB;AACA,gDAAgD;AAChD;;CAEC,cAAc;AACf;AACA;CACC,cAAc;AACf;AACA;CACC,gBAAgB;AACjB;AACA;CACC,YAAY;AACb;AACA;;CAEC,WAAW;CACX,aAAa;AACd;AACA;CACC,yBAAyB;CACzB,iBAAiB;AAClB",sourcesContent:["/* http://meyerweb.com/eric/tools/css/reset/ \n   v2.0 | 20110126\n   License: none (public domain)\n*/\n\nhtml, body, div, span, applet, object, iframe,\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\na, abbr, acronym, address, big, cite, code,\ndel, dfn, em, img, ins, kbd, q, s, samp,\nsmall, strike, strong, sub, sup, tt, var,\nb, u, i, center,\ndl, dt, dd, ol, ul, li,\nfieldset, form, label, legend,\ntable, caption, tbody, tfoot, thead, tr, th, td,\narticle, aside, canvas, details, embed, \nfigure, figcaption, footer, header, hgroup, \nmenu, nav, output, ruby, section, summary,\ntime, mark, audio, video {\n\tmargin: 0;\n\tpadding: 0;\n\tborder: 0;\n\tfont-size: 100%;\n\tfont: inherit;\n\tvertical-align: baseline;\n}\n/* HTML5 display-role reset for older browsers */\narticle, aside, details, figcaption, figure, \nfooter, header, hgroup, menu, nav, section {\n\tdisplay: block;\n}\nbody {\n\tline-height: 1;\n}\nol, ul {\n\tlist-style: none;\n}\nblockquote, q {\n\tquotes: none;\n}\nblockquote:before, blockquote:after,\nq:before, q:after {\n\tcontent: '';\n\tcontent: none;\n}\ntable {\n\tborder-collapse: collapse;\n\tborder-spacing: 0;\n}"],sourceRoot:""}]);const s=i},426:(e,n,t)=>{t.d(n,{Z:()=>s});var r=t(537),o=t.n(r),a=t(645),i=t.n(a)()(o());i.push([e.id,"html {\n    box-sizing: border-box;\n    font-family: sans-serif;\n    font-size: 16px;\n    background-color: #fafafa;\n    color: #262626;\n}\n\nbody {\n    height: 100vh;\n    width: 100vw;\n    display: grid;\n    grid-template-rows: 4rem 1fr 3rem;\n    background-color: #1e3a8a;\n    color: #e5e5e5;\n}\n\n/*Header style*/\nheader {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n}\n\nh1 {\n    font-size: 3rem;\n}\n/*End Header style*/\n\n/*Main game area style*/\nmain {\n    display: grid;\n    grid-template-rows: 4rem 2em 1fr;\n    align-items: center;\n    justify-items: center;\n}\n\n.board-section {\n    display: flex;\n    /*To allow easy insertion of second gameboard to screen*/\n    justify-content: space-around;\n    gap: 100px;\n}\n\n#axis-button, #restart-button {\n    height: 2rem;\n    width: 8rem;\n}\n\n#restart-button {\n    display: none;\n}\n\n.board-wrapper {\n    width: 500px;\n    height: 500px;\n    display: grid;\n    gap: 2px;\n    grid-template-rows: repeat(10, 1fr);\n    grid-template-columns: repeat(10, 1fr);\n}\n\n.board-cell {\n    height: 100%;\n    width: 100%;\n    border: 2px solid #fafafa;\n}\n\n.ship-cell {\n    background-color: #60a5fa;\n}\n\n.board-cell:hover {\n    cursor: pointer;\n    background-color: #2e4a9a;\n}\n\n.ship-cell:hover {\n    cursor: pointer;\n    background-color: #bfdbfe;\n}\n\n.hit-cell {\n    background-color: #86efac;\n}\n\n.miss-cell {\n    background-color: #fca5a5;\n}\n\n.invalid-cell:hover {\n    cursor: not-allowed;\n}\n\n.click-blocker {\n    background-color: rgba(1, 1, 1, 0.1);\n    position: fixed;\n    bottom: 0;\n    left: 0;\n    right: 0;\n    top: 0;\n}\n/*End Main game area style*/\n\n/*Footer style*/\nfooter {\n    background-color: #e5e5e5;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n}\n\n.project-links {\n    color: #262626;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    gap: 20px;\n}\n\n.git-logo {\n    width: 32px;\n}\n/*End Footer style*/","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;IACI,sBAAsB;IACtB,uBAAuB;IACvB,eAAe;IACf,yBAAyB;IACzB,cAAc;AAClB;;AAEA;IACI,aAAa;IACb,YAAY;IACZ,aAAa;IACb,iCAAiC;IACjC,yBAAyB;IACzB,cAAc;AAClB;;AAEA,eAAe;AACf;IACI,aAAa;IACb,uBAAuB;IACvB,mBAAmB;AACvB;;AAEA;IACI,eAAe;AACnB;AACA,mBAAmB;;AAEnB,uBAAuB;AACvB;IACI,aAAa;IACb,gCAAgC;IAChC,mBAAmB;IACnB,qBAAqB;AACzB;;AAEA;IACI,aAAa;IACb,wDAAwD;IACxD,6BAA6B;IAC7B,UAAU;AACd;;AAEA;IACI,YAAY;IACZ,WAAW;AACf;;AAEA;IACI,aAAa;AACjB;;AAEA;IACI,YAAY;IACZ,aAAa;IACb,aAAa;IACb,QAAQ;IACR,mCAAmC;IACnC,sCAAsC;AAC1C;;AAEA;IACI,YAAY;IACZ,WAAW;IACX,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,eAAe;IACf,yBAAyB;AAC7B;;AAEA;IACI,eAAe;IACf,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,mBAAmB;AACvB;;AAEA;IACI,oCAAoC;IACpC,eAAe;IACf,SAAS;IACT,OAAO;IACP,QAAQ;IACR,MAAM;AACV;AACA,2BAA2B;;AAE3B,eAAe;AACf;IACI,yBAAyB;IACzB,aAAa;IACb,mBAAmB;IACnB,uBAAuB;AAC3B;;AAEA;IACI,cAAc;IACd,aAAa;IACb,uBAAuB;IACvB,mBAAmB;IACnB,SAAS;AACb;;AAEA;IACI,WAAW;AACf;AACA,mBAAmB",sourcesContent:["html {\n    box-sizing: border-box;\n    font-family: sans-serif;\n    font-size: 16px;\n    background-color: #fafafa;\n    color: #262626;\n}\n\nbody {\n    height: 100vh;\n    width: 100vw;\n    display: grid;\n    grid-template-rows: 4rem 1fr 3rem;\n    background-color: #1e3a8a;\n    color: #e5e5e5;\n}\n\n/*Header style*/\nheader {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n}\n\nh1 {\n    font-size: 3rem;\n}\n/*End Header style*/\n\n/*Main game area style*/\nmain {\n    display: grid;\n    grid-template-rows: 4rem 2em 1fr;\n    align-items: center;\n    justify-items: center;\n}\n\n.board-section {\n    display: flex;\n    /*To allow easy insertion of second gameboard to screen*/\n    justify-content: space-around;\n    gap: 100px;\n}\n\n#axis-button, #restart-button {\n    height: 2rem;\n    width: 8rem;\n}\n\n#restart-button {\n    display: none;\n}\n\n.board-wrapper {\n    width: 500px;\n    height: 500px;\n    display: grid;\n    gap: 2px;\n    grid-template-rows: repeat(10, 1fr);\n    grid-template-columns: repeat(10, 1fr);\n}\n\n.board-cell {\n    height: 100%;\n    width: 100%;\n    border: 2px solid #fafafa;\n}\n\n.ship-cell {\n    background-color: #60a5fa;\n}\n\n.board-cell:hover {\n    cursor: pointer;\n    background-color: #2e4a9a;\n}\n\n.ship-cell:hover {\n    cursor: pointer;\n    background-color: #bfdbfe;\n}\n\n.hit-cell {\n    background-color: #86efac;\n}\n\n.miss-cell {\n    background-color: #fca5a5;\n}\n\n.invalid-cell:hover {\n    cursor: not-allowed;\n}\n\n.click-blocker {\n    background-color: rgba(1, 1, 1, 0.1);\n    position: fixed;\n    bottom: 0;\n    left: 0;\n    right: 0;\n    top: 0;\n}\n/*End Main game area style*/\n\n/*Footer style*/\nfooter {\n    background-color: #e5e5e5;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n}\n\n.project-links {\n    color: #262626;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    gap: 20px;\n}\n\n.git-logo {\n    width: 32px;\n}\n/*End Footer style*/"],sourceRoot:""}]);const s=i},645:e=>{e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var t="",r=void 0!==n[5];return n[4]&&(t+="@supports (".concat(n[4],") {")),n[2]&&(t+="@media ".concat(n[2]," {")),r&&(t+="@layer".concat(n[5].length>0?" ".concat(n[5]):""," {")),t+=e(n),r&&(t+="}"),n[2]&&(t+="}"),n[4]&&(t+="}"),t})).join("")},n.i=function(e,t,r,o,a){"string"==typeof e&&(e=[[null,e,void 0]]);var i={};if(r)for(var s=0;s<this.length;s++){var l=this[s][0];null!=l&&(i[l]=!0)}for(var c=0;c<e.length;c++){var A=[].concat(e[c]);r&&i[A[0]]||(void 0!==a&&(void 0===A[5]||(A[1]="@layer".concat(A[5].length>0?" ".concat(A[5]):""," {").concat(A[1],"}")),A[5]=a),t&&(A[2]?(A[1]="@media ".concat(A[2]," {").concat(A[1],"}"),A[2]=t):A[2]=t),o&&(A[4]?(A[1]="@supports (".concat(A[4],") {").concat(A[1],"}"),A[4]=o):A[4]="".concat(o)),n.push(A))}},n}},537:e=>{e.exports=function(e){var n=e[1],t=e[3];if(!t)return n;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),a="/*# ".concat(o," */"),i=t.sources.map((function(e){return"/*# sourceURL=".concat(t.sourceRoot||"").concat(e," */")}));return[n].concat(i).concat([a]).join("\n")}return[n].join("\n")}},379:e=>{var n=[];function t(e){for(var t=-1,r=0;r<n.length;r++)if(n[r].identifier===e){t=r;break}return t}function r(e,r){for(var a={},i=[],s=0;s<e.length;s++){var l=e[s],c=r.base?l[0]+r.base:l[0],A=a[c]||0,d="".concat(c," ").concat(A);a[c]=A+1;var u=t(d),p={css:l[1],media:l[2],sourceMap:l[3],supports:l[4],layer:l[5]};if(-1!==u)n[u].references++,n[u].updater(p);else{var f=o(p,r);r.byIndex=s,n.splice(s,0,{identifier:d,updater:f,references:1})}i.push(d)}return i}function o(e,n){var t=n.domAPI(n);return t.update(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap&&n.supports===e.supports&&n.layer===e.layer)return;t.update(e=n)}else t.remove()}}e.exports=function(e,o){var a=r(e=e||[],o=o||{});return function(e){e=e||[];for(var i=0;i<a.length;i++){var s=t(a[i]);n[s].references--}for(var l=r(e,o),c=0;c<a.length;c++){var A=t(a[c]);0===n[A].references&&(n[A].updater(),n.splice(A,1))}a=l}}},569:e=>{var n={};e.exports=function(e,t){var r=function(e){if(void 0===n[e]){var t=document.querySelector(e);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(e){t=null}n[e]=t}return n[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},216:e=>{e.exports=function(e){var n=document.createElement("style");return e.setAttributes(n,e.attributes),e.insert(n,e.options),n}},565:(e,n,t)=>{e.exports=function(e){var n=t.nc;n&&e.setAttribute("nonce",n)}},795:e=>{e.exports=function(e){var n=e.insertStyleElement(e);return{update:function(t){!function(e,n,t){var r="";t.supports&&(r+="@supports (".concat(t.supports,") {")),t.media&&(r+="@media ".concat(t.media," {"));var o=void 0!==t.layer;o&&(r+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),r+=t.css,o&&(r+="}"),t.media&&(r+="}"),t.supports&&(r+="}");var a=t.sourceMap;a&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),n.styleTagTransform(r,e,n.options)}(n,e,t)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)}}}},589:e=>{e.exports=function(e,n){if(n.styleSheet)n.styleSheet.cssText=e;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(e))}}}},n={};function t(r){var o=n[r];if(void 0!==o)return o.exports;var a=n[r]={id:r,exports:{}};return e[r](a,a.exports,t),a.exports}t.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return t.d(n,{a:n}),n},t.d=(e,n)=>{for(var r in n)t.o(n,r)&&!t.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:n[r]})},t.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),(()=>{var e=t(379),n=t.n(e),r=t(795),o=t.n(r),a=t(569),i=t.n(a),s=t(565),l=t.n(s),c=t(216),A=t.n(c),d=t(589),u=t.n(d),p=t(917),f={};f.styleTagTransform=u(),f.setAttributes=l(),f.insert=i().bind(null,"head"),f.domAPI=o(),f.insertStyleElement=A(),n()(p.Z,f),p.Z&&p.Z.locals&&p.Z.locals;var m=t(426),h={};h.styleTagTransform=u(),h.setAttributes=l(),h.insert=i().bind(null,"head"),h.domAPI=o(),h.insertStyleElement=A(),n()(m.Z,h),m.Z&&m.Z.locals&&m.Z.locals;const C=e=>{const n=e;let t=!1,r=[];return(()=>{for(let e=0;e<n;e++)r.push(!1)})(),{isSunk:()=>{t=!0;for(const e of r)0==e&&(t=!1);return t},hit:e=>(r[e]=!0,r)}},y=(()=>{const e=document.querySelector(".message-text");return{placeShipsMessage:()=>{e.textContent='Click the board to place your ships. Click "Rotate Ship" to change direction.'},shotResult:(n,t,r)=>{e.textContent=n},addCurrentTurnToMessage:n=>{e.textContent+="PLAYER"===n?". Player turn. Click a square to launch an attack!":". Computer taking turn. Attacking..."},displayMessage:n=>{e.textContent=n},addShipSunkMessage:()=>{e.textContent+=". You sunk a ship!"}}})(),b=()=>{const e=10;let n="VERTICAL",t=[],r=[],o=[],a=0;const i=()=>{t=[],o=[];for(let n=0;n<e;n++){t.push([]),o.push([]);for(let r=0;r<e;r++)t[n].push(-1),o[n].push(-1)}},s=()=>{r=[];for(let e=1;e<=5;e++)1===e?r.push(C(e+1)):r.push(C(e))};return i(),s(),{placeShip:(n,o,i,s,l)=>{if(n>=r.length||n<0)throw new Error("No ship exists at provided index");if(o>=e||i>=e||s>=e||l>=e)throw new Error("Invalid coordinates received. Out of bounds");if(o<0||i<0||s<0||l<0)throw new Error("Invalid coordinates received. Out of bounds");let c=0;for(let e=o;e<=s;e++)for(let r=i;r<=l;r++)t[e][r]={ship:n,shipIndex:c},c++;return a++,[t[o][i].ship,t[s][l].ship]},receiveAttack:(e,n)=>"object"==typeof t[e][n]?(r[t[e][n].ship].hit(t[e][n].shipIndex),o[e][n]=1,"HIT"):(o[e][n]=0,"MISS"),isAllSunk:()=>{let e=!0;for(const n of r)n.isSunk()||(e=!1);return e},getShotStatus:(n,t)=>{if(n>=e||t>=e)throw new Error("Invalid coordinates received. Out of bounds");if(n<0||t<0)throw new Error("Invalid coordinates received. Out of bounds");let r=o[n][t];if(-1===r)return"No shot fired";if(1===r)return"HIT";if(0===r)return"MISS";throw new Error("Invalid coordinate received")},printBoard:()=>{let n="";for(let r=0;r<e;r++){for(let o=0;o<e;o++)n+=t[r][o]+", ";n+="\n"}return n},getBoard:()=>t,getShipsPlaced:()=>a,changeShipOrientation:()=>{n="VERTICAL"===n?"HORIZONTAL":"VERTICAL"},getShipOrientation:()=>n,isValidPlacement:(e,r)=>{if(a<5){if("VERTICAL"===n&&0===a&&e>8)return!1;if("VERTICAL"===n&&e>9-a)return!1;if("VERTICAL"===n&&a>0){let n=!1;for(let o=0;o<a+1;o++)-1===t[e+o][r]&&-1===t[e+o+1][r]&&-1===t[e+o-1][r]||(n=!0);return!n}if("HORIZONTAL"===n&&0===a&&r>8)return!1;if("HORIZONTAL"===n&&r>9-a)return!1;if("HORIZONTAL"===n&&a>0){let n=!1;for(let o=0;o<a+1;o++)-1===t[e][r+o]&&-1===t[e][r+o+1]&&-1===t[e][r+o-1]||(n=!0);return!n}return!0}return!0},resetBoard:()=>{i(),s(),a=0,n="VERTICAL"}}},g=(()=>{const e=(e,n,t,r)=>{let o=n.getShipsPlaced();if(o<5)if(0===o){n.placeShip(o,t,r,t+1,r);for(let e=0;e<o+2;e++)document.getElementById("player"+(t+e)+r).classList.add("ship-cell")}else{n.placeShip(o,t,r,t+o,r),e.classList.add("ship-cell");for(let e=0;e<o+1;e++)document.getElementById("player"+(t+e)+r).classList.add("ship-cell")}},n=(e,n,t,r)=>{let o=n.getShipsPlaced();if(o<5)if(0===o){n.placeShip(o,t,r,t,r+1);for(let e=0;e<o+2;e++)document.getElementById("player"+t+(r+e)).classList.add("ship-cell")}else{n.placeShip(o,t,r,t,r+o),e.classList.add("ship-cell");for(let e=0;e<o+1;e++)document.getElementById("player"+t+(r+e)).classList.add("ship-cell")}};return{initBoards:(t,r,o,a)=>{((t,r,o)=>{const a=document.querySelector(".player-board");for(let t=0;t<10;t++)for(let o=0;o<10;o++){const i=document.createElement("div");i.classList.add("board-cell"),i.id="player"+t+o,"object"==typeof r.getBoard()[t][o]&&i.classList.add("ship-cell"),i.addEventListener("mouseover",(function(){r.isValidPlacement(t,o)?i.classList.remove("invalid-cell"):i.classList.add("invalid-cell")})),i.addEventListener("click",(function(){let a=r.getShipOrientation();"VERTICAL"===a?e(i,r,t,o):"HORIZONTAL"===a&&n(i,r,t,o),r.getShipsPlaced()>=5&&(document.querySelector(".computer-board").style.removeProperty("display"),document.getElementById("axis-button").style.display="none",document.getElementById("restart-button").style.display="inline")})),a.appendChild(i)}})(0,o),((e,n,t)=>{const r=document.querySelector(".computer-board");for(let o=0;o<10;o++)for(let a=0;a<10;a++){const i=document.createElement("div");i.classList.add("board-cell"),i.id="comp"+o+a,i.addEventListener("click",(function(){B.getGameOver()||B.gameTurn(e,n,t,o,a)})),r.appendChild(i)}r.style.display="none"})(t,o,a),document.getElementById("restart-button").addEventListener("click",(function(){B.restartGame(),document.getElementById("axis-button").style.display="inline",document.getElementById("restart-button").style.display="none"})),document.getElementById("axis-button").addEventListener("click",(function(){o.changeShipOrientation()}))}}})(),I=e=>{const n=e;return{attack:(e,n,t)=>{if(!e.hasOwnProperty("placeShip"))throw new Error("Invalid gameboard object received");return((e,n,t)=>{if(!e.hasOwnProperty("placeShip"))throw new Error("Invalid gameboard object received");return"HIT"!==e.getShotStatus(n,t)&&"MISS"!==e.getShotStatus(n,t)})(e,n,t)?(e.receiveAttack(n,t),e.getShotStatus(n,t)):"Attack failed. Cannot attack same square twice"},isPlayerHuman:()=>n}},v=(e,n)=>(e=Math.ceil(e),n=Math.floor(n),Math.floor(Math.random()*(n-e)+e)),B=(()=>{const e=I(!0),n=I(!1),t=b(),r=b();let o="PLAYER",a=!1;const i=()=>{o="PLAYER",a=!1,document.querySelector(".click-blocker").style.display="none",(()=>{let e=[];for(let n=0;n<5;n++)if(0===n){let t=v(0,10-(n+1)),o=v(0,10);for(;e.includes(o)||e.includes(o+1)||e.includes(o-1);)o=v(0,10);let a=o,i=t+1;r.placeShip(n,t,o,i,a),e.push(o)}else{let t=v(0,10-n),o=v(0,10);for(;e.includes(o)||e.includes(o+1)||e.includes(o-1);)o=v(0,10);let a=o,i=t+n;r.placeShip(n,t,o,i,a),e.push(o)}})(),g.initBoards(e,n,t,r),y.placeShipsMessage()},s=()=>{a||(o="PLAYER"===o?"COMP":"PLAYER",y.addCurrentTurnToMessage(o),"COMP"===o&&setTimeout((function(){(()=>{let e=v(0,10),r=v(0,10),a=n.attack(t,e,r),i="PLAYER"===o?"comp":"player";y.shotResult(a,e,r);let s=document.getElementById(i+e+r);"HIT"===a&&s.classList.add("hit-cell"),"MISS"===a&&s.classList.add("miss-cell")})(),s(),document.querySelector(".click-blocker").style.display="none"}),1e3))};return{initGame:i,gameTurn:(e,n,t,r,i)=>{let l;if("PLAYER"===o)l=e.attack(t,r,i),document.querySelector(".click-blocker").style.removeProperty("display");else if("COMP"===o){let n=v(0,10),r=v(0,10);l=e.attack(t,n,r)}let c="PLAYER"===o?"comp":"player";y.shotResult(l,r,i);let A=document.getElementById(c+r+i);"HIT"===l&&A.classList.add("hit-cell"),"MISS"===l&&A.classList.add("miss-cell");let d=e.isPlayerHuman()?"You win!":"Computer player wins!";d="Game Over. "+d,t.isAllSunk()&&(y.displayMessage(d),a=!0),s()},getGameOver:()=>a,restartGame:()=>{let e=document.querySelector(".player-board"),n=document.querySelector(".computer-board");for(;e.firstChild;)e.removeChild(e.firstChild);for(;n.firstChild;)n.removeChild(n.firstChild);t.resetBoard(),r.resetBoard(),i(),document.getElementById("axis-button").addEventListener("click",(function(){t.changeShipOrientation()}))},getTurn:()=>o}})();B.initGame()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,