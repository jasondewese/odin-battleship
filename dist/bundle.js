(()=>{"use strict";var e={917:(e,n,t)=>{t.d(n,{Z:()=>s});var o=t(537),r=t.n(o),a=t(645),i=t.n(a)()(r());i.push([e.id,"/* http://meyerweb.com/eric/tools/css/reset/ \n   v2.0 | 20110126\n   License: none (public domain)\n*/\n\nhtml, body, div, span, applet, object, iframe,\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\na, abbr, acronym, address, big, cite, code,\ndel, dfn, em, img, ins, kbd, q, s, samp,\nsmall, strike, strong, sub, sup, tt, var,\nb, u, i, center,\ndl, dt, dd, ol, ul, li,\nfieldset, form, label, legend,\ntable, caption, tbody, tfoot, thead, tr, th, td,\narticle, aside, canvas, details, embed, \nfigure, figcaption, footer, header, hgroup, \nmenu, nav, output, ruby, section, summary,\ntime, mark, audio, video {\n\tmargin: 0;\n\tpadding: 0;\n\tborder: 0;\n\tfont-size: 100%;\n\tfont: inherit;\n\tvertical-align: baseline;\n}\n/* HTML5 display-role reset for older browsers */\narticle, aside, details, figcaption, figure, \nfooter, header, hgroup, menu, nav, section {\n\tdisplay: block;\n}\nbody {\n\tline-height: 1;\n}\nol, ul {\n\tlist-style: none;\n}\nblockquote, q {\n\tquotes: none;\n}\nblockquote:before, blockquote:after,\nq:before, q:after {\n\tcontent: '';\n\tcontent: none;\n}\ntable {\n\tborder-collapse: collapse;\n\tborder-spacing: 0;\n}","",{version:3,sources:["webpack://./src/reset.css"],names:[],mappings:"AAAA;;;CAGC;;AAED;;;;;;;;;;;;;CAaC,SAAS;CACT,UAAU;CACV,SAAS;CACT,eAAe;CACf,aAAa;CACb,wBAAwB;AACzB;AACA,gDAAgD;AAChD;;CAEC,cAAc;AACf;AACA;CACC,cAAc;AACf;AACA;CACC,gBAAgB;AACjB;AACA;CACC,YAAY;AACb;AACA;;CAEC,WAAW;CACX,aAAa;AACd;AACA;CACC,yBAAyB;CACzB,iBAAiB;AAClB",sourcesContent:["/* http://meyerweb.com/eric/tools/css/reset/ \n   v2.0 | 20110126\n   License: none (public domain)\n*/\n\nhtml, body, div, span, applet, object, iframe,\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\na, abbr, acronym, address, big, cite, code,\ndel, dfn, em, img, ins, kbd, q, s, samp,\nsmall, strike, strong, sub, sup, tt, var,\nb, u, i, center,\ndl, dt, dd, ol, ul, li,\nfieldset, form, label, legend,\ntable, caption, tbody, tfoot, thead, tr, th, td,\narticle, aside, canvas, details, embed, \nfigure, figcaption, footer, header, hgroup, \nmenu, nav, output, ruby, section, summary,\ntime, mark, audio, video {\n\tmargin: 0;\n\tpadding: 0;\n\tborder: 0;\n\tfont-size: 100%;\n\tfont: inherit;\n\tvertical-align: baseline;\n}\n/* HTML5 display-role reset for older browsers */\narticle, aside, details, figcaption, figure, \nfooter, header, hgroup, menu, nav, section {\n\tdisplay: block;\n}\nbody {\n\tline-height: 1;\n}\nol, ul {\n\tlist-style: none;\n}\nblockquote, q {\n\tquotes: none;\n}\nblockquote:before, blockquote:after,\nq:before, q:after {\n\tcontent: '';\n\tcontent: none;\n}\ntable {\n\tborder-collapse: collapse;\n\tborder-spacing: 0;\n}"],sourceRoot:""}]);const s=i},426:(e,n,t)=>{t.d(n,{Z:()=>s});var o=t(537),r=t.n(o),a=t(645),i=t.n(a)()(r());i.push([e.id,"html {\n    box-sizing: border-box;\n    font-family: sans-serif;\n    font-size: 16px;\n    background-color: #fafafa;\n    color: #262626;\n}\n\nbody {\n    height: 100vh;\n    width: 100vw;\n\n    display: grid;\n    grid-template-rows: 6rem 1fr 3rem;\n    background-color: #1e3a8a;\n    color: #e5e5e5;\n}\n\n/*Header style*/\nheader {\n    \n    display: flex;\n    justify-content: center;\n    align-items: center;\n}\n\nh1 {\n    font-size: 3rem;\n}\n/*End Header style*/\n\n/*Main game area style*/\nmain {\n    \n    display: grid;\n    grid-template-rows: 5rem 3rem 1fr;\n    align-items: center;\n    justify-items: center;\n}\n\n.board-section {\n    display: flex;\n    /*To allow easy insertion of second gameboard to screen*/\n    justify-content: space-around;\n    gap: 100px;\n}\n\n#axis-button {\n    height: 2rem;\n    width: 8rem;\n}\n\n.board-wrapper {\n    \n    width: 500px;\n    height: 500px;\n\n    display: grid;\n    gap: 2px;\n    grid-template-rows: repeat(10, 1fr);\n    grid-template-columns: repeat(10, 1fr);\n}\n\n.board-cell {\n    height: 100%;\n    width: 100%;\n    border: 2px solid #fafafa;\n}\n\n.ship-cell {\n    background-color: #60a5fa;\n}\n\n.board-cell:hover {\n    cursor: pointer;\n    background-color: #2e4a9a;\n}\n\n.ship-cell:hover {\n    cursor: pointer;\n    background-color: #bfdbfe;\n}\n\n.hit-cell {\n    background-color: #86efac;\n}\n\n.miss-cell {\n    background-color: #fca5a5;\n}\n\n/*End Main game area style*/\n\n/*Footer style*/\nfooter {\n    background-color: #e5e5e5;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n}\n\n.project-links {\n    color: #262626;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    gap: 20px;\n}\n\n.git-logo {\n    width: 32px;\n}\n/*End Footer style*/","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;IACI,sBAAsB;IACtB,uBAAuB;IACvB,eAAe;IACf,yBAAyB;IACzB,cAAc;AAClB;;AAEA;IACI,aAAa;IACb,YAAY;;IAEZ,aAAa;IACb,iCAAiC;IACjC,yBAAyB;IACzB,cAAc;AAClB;;AAEA,eAAe;AACf;;IAEI,aAAa;IACb,uBAAuB;IACvB,mBAAmB;AACvB;;AAEA;IACI,eAAe;AACnB;AACA,mBAAmB;;AAEnB,uBAAuB;AACvB;;IAEI,aAAa;IACb,iCAAiC;IACjC,mBAAmB;IACnB,qBAAqB;AACzB;;AAEA;IACI,aAAa;IACb,wDAAwD;IACxD,6BAA6B;IAC7B,UAAU;AACd;;AAEA;IACI,YAAY;IACZ,WAAW;AACf;;AAEA;;IAEI,YAAY;IACZ,aAAa;;IAEb,aAAa;IACb,QAAQ;IACR,mCAAmC;IACnC,sCAAsC;AAC1C;;AAEA;IACI,YAAY;IACZ,WAAW;IACX,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,eAAe;IACf,yBAAyB;AAC7B;;AAEA;IACI,eAAe;IACf,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA,2BAA2B;;AAE3B,eAAe;AACf;IACI,yBAAyB;IACzB,aAAa;IACb,mBAAmB;IACnB,uBAAuB;AAC3B;;AAEA;IACI,cAAc;IACd,aAAa;IACb,uBAAuB;IACvB,mBAAmB;IACnB,SAAS;AACb;;AAEA;IACI,WAAW;AACf;AACA,mBAAmB",sourcesContent:["html {\n    box-sizing: border-box;\n    font-family: sans-serif;\n    font-size: 16px;\n    background-color: #fafafa;\n    color: #262626;\n}\n\nbody {\n    height: 100vh;\n    width: 100vw;\n\n    display: grid;\n    grid-template-rows: 6rem 1fr 3rem;\n    background-color: #1e3a8a;\n    color: #e5e5e5;\n}\n\n/*Header style*/\nheader {\n    \n    display: flex;\n    justify-content: center;\n    align-items: center;\n}\n\nh1 {\n    font-size: 3rem;\n}\n/*End Header style*/\n\n/*Main game area style*/\nmain {\n    \n    display: grid;\n    grid-template-rows: 5rem 3rem 1fr;\n    align-items: center;\n    justify-items: center;\n}\n\n.board-section {\n    display: flex;\n    /*To allow easy insertion of second gameboard to screen*/\n    justify-content: space-around;\n    gap: 100px;\n}\n\n#axis-button {\n    height: 2rem;\n    width: 8rem;\n}\n\n.board-wrapper {\n    \n    width: 500px;\n    height: 500px;\n\n    display: grid;\n    gap: 2px;\n    grid-template-rows: repeat(10, 1fr);\n    grid-template-columns: repeat(10, 1fr);\n}\n\n.board-cell {\n    height: 100%;\n    width: 100%;\n    border: 2px solid #fafafa;\n}\n\n.ship-cell {\n    background-color: #60a5fa;\n}\n\n.board-cell:hover {\n    cursor: pointer;\n    background-color: #2e4a9a;\n}\n\n.ship-cell:hover {\n    cursor: pointer;\n    background-color: #bfdbfe;\n}\n\n.hit-cell {\n    background-color: #86efac;\n}\n\n.miss-cell {\n    background-color: #fca5a5;\n}\n\n/*End Main game area style*/\n\n/*Footer style*/\nfooter {\n    background-color: #e5e5e5;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n}\n\n.project-links {\n    color: #262626;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    gap: 20px;\n}\n\n.git-logo {\n    width: 32px;\n}\n/*End Footer style*/"],sourceRoot:""}]);const s=i},645:e=>{e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var t="",o=void 0!==n[5];return n[4]&&(t+="@supports (".concat(n[4],") {")),n[2]&&(t+="@media ".concat(n[2]," {")),o&&(t+="@layer".concat(n[5].length>0?" ".concat(n[5]):""," {")),t+=e(n),o&&(t+="}"),n[2]&&(t+="}"),n[4]&&(t+="}"),t})).join("")},n.i=function(e,t,o,r,a){"string"==typeof e&&(e=[[null,e,void 0]]);var i={};if(o)for(var s=0;s<this.length;s++){var l=this[s][0];null!=l&&(i[l]=!0)}for(var c=0;c<e.length;c++){var A=[].concat(e[c]);o&&i[A[0]]||(void 0!==a&&(void 0===A[5]||(A[1]="@layer".concat(A[5].length>0?" ".concat(A[5]):""," {").concat(A[1],"}")),A[5]=a),t&&(A[2]?(A[1]="@media ".concat(A[2]," {").concat(A[1],"}"),A[2]=t):A[2]=t),r&&(A[4]?(A[1]="@supports (".concat(A[4],") {").concat(A[1],"}"),A[4]=r):A[4]="".concat(r)),n.push(A))}},n}},537:e=>{e.exports=function(e){var n=e[1],t=e[3];if(!t)return n;if("function"==typeof btoa){var o=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(o),a="/*# ".concat(r," */"),i=t.sources.map((function(e){return"/*# sourceURL=".concat(t.sourceRoot||"").concat(e," */")}));return[n].concat(i).concat([a]).join("\n")}return[n].join("\n")}},379:e=>{var n=[];function t(e){for(var t=-1,o=0;o<n.length;o++)if(n[o].identifier===e){t=o;break}return t}function o(e,o){for(var a={},i=[],s=0;s<e.length;s++){var l=e[s],c=o.base?l[0]+o.base:l[0],A=a[c]||0,d="".concat(c," ").concat(A);a[c]=A+1;var p=t(d),u={css:l[1],media:l[2],sourceMap:l[3],supports:l[4],layer:l[5]};if(-1!==p)n[p].references++,n[p].updater(u);else{var f=r(u,o);o.byIndex=s,n.splice(s,0,{identifier:d,updater:f,references:1})}i.push(d)}return i}function r(e,n){var t=n.domAPI(n);return t.update(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap&&n.supports===e.supports&&n.layer===e.layer)return;t.update(e=n)}else t.remove()}}e.exports=function(e,r){var a=o(e=e||[],r=r||{});return function(e){e=e||[];for(var i=0;i<a.length;i++){var s=t(a[i]);n[s].references--}for(var l=o(e,r),c=0;c<a.length;c++){var A=t(a[c]);0===n[A].references&&(n[A].updater(),n.splice(A,1))}a=l}}},569:e=>{var n={};e.exports=function(e,t){var o=function(e){if(void 0===n[e]){var t=document.querySelector(e);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(e){t=null}n[e]=t}return n[e]}(e);if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(t)}},216:e=>{e.exports=function(e){var n=document.createElement("style");return e.setAttributes(n,e.attributes),e.insert(n,e.options),n}},565:(e,n,t)=>{e.exports=function(e){var n=t.nc;n&&e.setAttribute("nonce",n)}},795:e=>{e.exports=function(e){var n=e.insertStyleElement(e);return{update:function(t){!function(e,n,t){var o="";t.supports&&(o+="@supports (".concat(t.supports,") {")),t.media&&(o+="@media ".concat(t.media," {"));var r=void 0!==t.layer;r&&(o+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),o+=t.css,r&&(o+="}"),t.media&&(o+="}"),t.supports&&(o+="}");var a=t.sourceMap;a&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),n.styleTagTransform(o,e,n.options)}(n,e,t)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)}}}},589:e=>{e.exports=function(e,n){if(n.styleSheet)n.styleSheet.cssText=e;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(e))}}}},n={};function t(o){var r=n[o];if(void 0!==r)return r.exports;var a=n[o]={id:o,exports:{}};return e[o](a,a.exports,t),a.exports}t.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return t.d(n,{a:n}),n},t.d=(e,n)=>{for(var o in n)t.o(n,o)&&!t.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:n[o]})},t.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),(()=>{var e=t(379),n=t.n(e),o=t(795),r=t.n(o),a=t(569),i=t.n(a),s=t(565),l=t.n(s),c=t(216),A=t.n(c),d=t(589),p=t.n(d),u=t(917),f={};f.styleTagTransform=p(),f.setAttributes=l(),f.insert=i().bind(null,"head"),f.domAPI=r(),f.insertStyleElement=A(),n()(u.Z,f),u.Z&&u.Z.locals&&u.Z.locals;var m=t(426),h={};h.styleTagTransform=p(),h.setAttributes=l(),h.insert=i().bind(null,"head"),h.domAPI=r(),h.insertStyleElement=A(),n()(m.Z,h),m.Z&&m.Z.locals&&m.Z.locals;const g=(()=>{let e="VERTICAL";const n=(e,n,t,o)=>{let r=I.getShipsPlaced();if(r<5){if(0===r){n.placeShip(r,t,o,t+1,o);for(let e=0;e<r+2;e++)document.getElementById("player"+(t+e)+o).classList.add("ship-cell")}else{n.placeShip(r,t,o,t+r,o),e.classList.add("ship-cell");for(let e=0;e<r+1;e++)document.getElementById("player"+(t+e)+o).classList.add("ship-cell")}I.addPlayerShip()}},t=(e,n,t,o)=>{let r=I.getShipsPlaced();if(r<5){if(0===r){n.placeShip(r,t,o,t,o+1);for(let e=0;e<r+2;e++)document.getElementById("player"+t+(o+e)).classList.add("ship-cell")}else{n.placeShip(r,t,o,t,o+r),e.classList.add("ship-cell");for(let e=0;e<r+1;e++)document.getElementById("player"+t+(o+e)).classList.add("ship-cell")}I.addPlayerShip()}};return{initBoards:(o,r,a,i)=>{((o,r,a)=>{const i=document.querySelector(".player-board");for(let o=0;o<10;o++)for(let a=0;a<10;a++){const s=document.createElement("div");s.classList.add("board-cell"),s.id="player"+o+a,"object"==typeof r.getBoard()[o][a]&&s.classList.add("ship-cell"),s.addEventListener("click",(function(){"VERTICAL"===e?n(s,r,o,a):"HORIZONTAL"===e&&t(s,r,o,a),I.getShipsPlaced()>=5&&document.querySelector(".computer-board").style.removeProperty("display")})),i.appendChild(s)}})(0,a),((e,n,t)=>{const o=document.querySelector(".computer-board");for(let r=0;r<10;r++)for(let a=0;a<10;a++){const i=document.createElement("div");i.classList.add("board-cell"),i.id="comp"+r+a,"object"==typeof t.getBoard()[r][a]&&i.classList.add("ship-cell"),i.addEventListener("click",(function(){I.gameTurn(e,n,t,r,a)})),o.appendChild(i)}o.style.display="none"})(o,a,i),document.getElementById("axis-button").addEventListener("click",(function(){e="VERTICAL"===e?"HORIZONTAL":"VERTICAL"}))}}})(),b=e=>{const n=e;let t=!1,o=[];return(()=>{for(let e=0;e<n;e++)o.push(!1)})(),{isSunk:()=>{t=!0;for(const e of o)0==e&&(t=!1);return t},hit:e=>(o[e]=!0,o)}},C=()=>{const e=10;let n=[],t=[],o=[],r=0;return(()=>{for(let t=0;t<e;t++){n.push([]),o.push([]);for(let r=0;r<e;r++)n[t].push(-1),o[t].push(-1)}})(),(()=>{for(let e=1;e<=5;e++)1===e?t.push(b(e+1)):t.push(b(e))})(),{placeShip:(o,a,i,s,l)=>{if(o>=t.length||o<0)throw new Error("No ship exists at provided index");if(a>=e||i>=e||s>=e||l>=e)throw new Error("Invalid coordinates received. Out of bounds");if(a<0||i<0||s<0||l<0)throw new Error("Invalid coordinates received. Out of bounds");let c=0;for(let e=a;e<=s;e++)for(let t=i;t<=l;t++)n[e][t]={ship:o,shipIndex:c},c++;return r++,[n[a][i].ship,n[s][l].ship]},receiveAttack:(e,r)=>"object"==typeof n[e][r]?(t[n[e][r].ship].hit(n[e][r].shipIndex),o[e][r]=1,"HIT"):(o[e][r]=0,"MISS"),isAllSunk:()=>{let e=!0;for(const n of t)n.isSunk()||(e=!1);return e},getShotStatus:(n,t)=>{if(n>=e||t>=e)throw new Error("Invalid coordinates received. Out of bounds");if(n<0||t<0)throw new Error("Invalid coordinates received. Out of bounds");let r=o[n][t];if(-1===r)return"No shot fired";if(1===r)return"HIT";if(0===r)return"MISS";throw new Error("Invalid coordinate received")},printBoard:()=>{let t="";for(let o=0;o<e;o++){for(let r=0;r<e;r++)t+=n[o][r]+", ";t+="\n"}return t},getBoard:()=>n,getShipsPlaced:()=>r}},y=e=>{const n=e;return{attack:(e,n,t)=>{if(!e.hasOwnProperty("placeShip"))throw new Error("Invalid gameboard object received");return((e,n,t)=>{if(!e.hasOwnProperty("placeShip"))throw new Error("Invalid gameboard object received");return"HIT"!==e.getShotStatus(n,t)&&"MISS"!==e.getShotStatus(n,t)})(e,n,t)?(e.receiveAttack(n,t),e.getShotStatus(n,t)):"Attack failed. Cannot attack same square twice"},isPlayerHuman:()=>n}},v=(e,n)=>(e=Math.ceil(e),n=Math.floor(n),Math.floor(Math.random()*(n-e)+e)),I=(()=>{const e=y(!0),n=y(!1),t=C(),o=C();let r="PLAYER",a=0;const i=()=>{r="PLAYER"===r?"COMP":"PLAYER",console.log(r+" turn."),"COMP"===r&&((()=>{let e=v(0,10),o=v(0,10),a=n.attack(t,e,o),i="PLAYER"===r?"comp":"player";console.log(a),console.log(`Attack received at ${e},${o}`);let s=document.getElementById(i+e+o);"HIT"===a&&s.classList.add("hit-cell"),"MISS"===a&&s.classList.add("miss-cell")})(),i())};return{initGame:()=>{o.placeShip(0,0,0,1,0),o.placeShip(1,0,2,1,2),o.placeShip(2,8,5,8,8),o.placeShip(3,1,7,5,7),o.placeShip(4,6,1,6,5),g.initBoards(e,n,t,o),console.log(r+" turn.")},gameLoop:()=>{for(;!t.isAllSunk()&&!o.isAllSunk();)console.log("Game over."),t.isAllSunk()?console.log("Computer player wins!"):console.log("You win!")},gameTurn:(e,n,t,o,a)=>{let s;if("PLAYER"===r)s=e.attack(t,o,a);else if("COMP"===r){let n=v(0,10),o=v(0,10);s=e.attack(t,n,o)}let l="PLAYER"===r?"comp":"player";console.log(s),console.log(`Attack received at ${o},${a}`);let c=document.getElementById(l+o+a);"HIT"===s&&c.classList.add("hit-cell"),"MISS"===s&&c.classList.add("miss-cell");let A=e.isPlayerHuman()?"You win!":"Computer player wins!";t.isAllSunk()&&console.log(A),i()},addPlayerShip:()=>{a++},getShipsPlaced:()=>a}})();I.initGame()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,